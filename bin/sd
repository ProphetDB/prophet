#!/usr/bin/perl 
use warnings;
use strict;
package SVB;

#use base 'Prophet::App';


package SVB::Record; # should probably be Prophet::App::Record
use base qw/Prophet::Record/;

package SVB::Model::Ticket;
use base qw/SVB::Record/;

use constant collection_class => 'SVB::Collection::Ticket';
use constant record_type => 'ticket';


use constant summary_format => '%u %s %s';
use constant summary_props => qw(summary status);




sub validate_status {
    my ($self, %args) = @_;
    # XXX: validater not called when a value is unset, so can't do
    # mandatory check here
    return 1 if scalar grep { $args{props}{status} eq $_ }
        qw(new open closed stalled);

    $args{errors}{status} = 'hate';
    return 0;

}

#has many SVK::Model::Comment
#has status
#has owner

__PACKAGE__->register_reference( comments => 'SVB::Collection::Comment',
                              by => 'ticket'
                            );
                            
package SVB::Model::Comment;
use base qw/SVB::Record/;

use constant collection_class => 'SVB::Collection::Comment';
use constant record_type => 'comment';

use constant summary_format => '%u %s';
use constant summary_props => qw(content);

#has SVK::Model::Ticket;

__PACKAGE__->register_reference( ticket => 'SVB::Model::Comment');


package SVB::Collection::Ticket;
use base 'Prophet::Collection';



use constant record_class => 'SVB::Model::Ticket';

package SVB::Collection::Comment;
use base 'Prophet::Collection';

use constant record_class => 'SVB::Model::Comment';

package main;
use Prophet::CLI;

$ENV{'PROPHET_REPO'} = $ENV{'SVB_REPO'} || $ENV{'HOME'}.'/.svb';

my $CLI = Prophet::CLI->new( {  } );
$CLI->register_types('SVB::Model' => qw(ticket comment));

my $command = shift @ARGV;

my $func = main->can('cmd_'.$command) || main->can('cmd_help');

$func->();


sub cmd_help {

print <<EOF

$0 ticket create --summary "This is a summary" --status new --somekey value
$0 ticket update --uuid <uuid> --status resolved
$0 ticket search --regex .
$0 ticket delete --uuid <uuid>
$0 ticket show --uuid <uuid>
$0 pull remote-url

$0 help  
    Show this file

EOF

}


sub cmd_comments {
    my ($ticket) = @ARGV;
    my $record = SVB::Model::Ticket->new( { handle => $CLI->handle } );
    $record->load( uuid => $ticket );
    print "id: " . $record->uuid . "\n";
    unless (@{$record->comments}) {
        print "No commnets found\n";
    }

    for (@{$record->comments}) {
        print "comment id: ".$_->uuid."\n";
        print "Content:\n".$_->prop('content');
        print "\n\n";
    }

}

sub cmd_push {

    # Trivial first pass:
#    only support pull
    

}

sub cmd_pull {
    my $url = shift @ARGV;
    local $ENV{PROPHET_RESOLVER} = 'Prompt';
    my %args =  ( from => $url, to => "file://".$CLI->handle->repo_path );

    $CLI->args(\%args);
    $CLI->do_merge();
        
#         [ 'merge', '--prefer', 'to', '--from', repo_uri_for($from), '--to', repo_uri_for( $self->name ) ],
}
=begin comment
    # Trivial first pass:
    
    # Give a SVN URL to the remote replica? do we need two svn urls (for res db?)
    
    
    
=end comment



# svb ticket --create --owner foo@bar --subject hate --status new --comment "wtf svb!"
# svb ticket --update <id> --status resolved
# svb ticket --list <regex>
# svb ticket --show <id>

# svb pull <url>
# svb push <url>
# svb pull http://<rt url>
# svb push http://<rt url>

