Step 3: Prophet
----
 A semirelational, 
 peer to peer replicated, 
 disconnected,
 versioned,
 property database with
 self-healing conflict
 resolution
----
WHAT ARE ALL THOSE BUZZWORDS?
----
semirelational
----
* Joins are expensive
* Joins are discouraged
----
peer-to-peer replicated
----
* Update any replica
* Pull from any replica
* Push _to_ any replica
* Changes will propagate
----
disconnected
----
* Real-time replication is hard to scale
* Real-time replication only works in the cloud
* I don't live in the cloud
  (Except when I go hiking)
* I want my data when I'm offline
* Prophet works offline.
* Prophet sync isn't time-constrained
----
versioned
----
* Compare a record to any point in the past
* All changes fully logged
* Undo changes
* Use history to be smart
----
property database
----
* Atomic changes
    - 'create', 'read', 'update', 'delete', 'search'
* Records can have validation and canonicalization
* Records do not NEED canonicalization and validation
* Records of the same type do not need to have the same properties
* Add and remove 'columns' at will
----
self-healing conflict resolution
----
* Prophet remembers all conflict resolutions
* Prophet detects identical conflicts
* Prophet can use your peers' resolutions as 'votes' for the winner in a conflict
----
HAVE YOU BUILT ANYTHING WITH IT?
----
sd
----
A bug tracker: 'simple defects'
----
 ./bin/sd ticket create --summary "Can't sync sd with Google Code" --status new
 Created ticket 93BF979E-08C1-11DD-94C3-D4B1FCEE7EC4
----
 ./bin/sd ticket search --regex .
 93BF979E-08C1-11DD-94C3-D4B1FCEE7EC4 Can't sync sd with Google Code new
----
 ./bin/sd ticket update --uuid 93BF979E-08C1-11DD-94C3-D4B1FCEE7EC4 --status resolved
----
 ./bin/sd ticket search --regex .
 93BF979E-08C1-11DD-94C3-D4B1FCEE7EC4 Can't sync sd with Google Code resolved
----
 Bugs on my laptop alone isn't interesting.
----
Syncable!
----
 ./bin/sd publish /tmp/mybugs
 scp -rvp /tmp/mybugs myserver.com:public_html/sd_replica
----
 Bob:
 ./bin/sd pull prophet:http://myserver.com/~clkao/sd_replica
----
Same thing over svn protocol 
(svn also supports push)
----
"My project uses another bug tracker!"
----
Actually, mine use two:
RT and Hiveminder.com
----
Wrote an RT Replica type for SD in an afternoon.
(Using only the public REST API)
----
Mirror an RT instance into SD
----
Share it with your peers using prophet
----
Sync changes back from your peers to RT
----
Wrote the same thing for Hiveminder
(Using only the public REST API)
----
Now I can sync with RT or Hiveminder
----
Now, I can sync BETWEEN RT *AND* Hiveminder
----
(Or two RTs)
----
We need more replica definitions:
----
Trac
----
Google Code
----
SourceForge
----
Bugzilla
----
Jira
----
GForge
----
debbugs
----
What else?
----
WHAT CAN I DO WITH PROPHET?
----
All your "small" databases
----
All the databases you want while offline.
----
Customer Relationship Management
----
Bug tracking
----
Sales Orders
----
Phone book
----
Blog
----
Trading Card Database
----
Ideas?
----
----
HOW IS PROPHET BUILT
----
Some terminology
----
Database
----
Replica
----
Foreign Replica
----
Record Type (or just 'Type')
----
Record
----
Change Set
----
Change
----
Property Change
----
Conflict
----
Nullifcation Change Set
----
Resolution Change Set
----
Merge
----
Merge Ticket
----
REPLICA BACKENDS
----
The Record Store
    Stores indivdual records by type
----
- The Changeset Store
    Stores each atomic change to a set of records
    Replaying all changesets will create an exact clone of the replica
----
Current "native" replica backends
    - Subversion: The initial backend. Slow, Steady, Robust. 
                  Supports remote sync

    - Filesystem: Readable. Flat files. Compact. Fast.
                  Currently export-only. (Update coming soon!) 
    - HTTP:       Flat-files, Currently read-only.
                  Same format as the filesystem replica type.
----
"Foriegn" replica backends
    - All current examples are in SD
----
SYNCHRONIZATION
----
Publish
    Serialize and export all of a replica's resolutions and changesets
Pull
    Integrate unseen resolutions and then unseen changesets from a replica
Push
    Integrate new resolutions and changesets into a replica
----
Conflicts and Resolutions
----
When a new changeset would conflict, Prophet:
    - Figures out the best resolution to the conflict
    - "Nullifies" the conflict so the changeset can be cleanly integrated
    - Integrates the conflicting changeset
    - Records the resolution as a new changeset 
    - Records the resolution decision in a resolution database
----
"Figure out the best resolution"  
----
Prophet has clever ways to figure out the best resolution.
(as well as a few really stupid ones)
- If there are previous resolutions for the same conflict AND
  a majority of them agree, use that
- If the merger has specified a "prefer this side" choice, use that
- Prompt the user to make a decision, giving them info about previous decisions
  for this conflict
----
We don't have a proof for the algorithm
----
We do have dozens of runs of randomized testing.
So far, it always stabilizes sanely.
----
HOW DOES IT SCALE?
----
* Vertical scale is boring
* Designed to scale to many peers
* Prophet is designed for peer to peer applications
* You are not Google
  (Most of you are not Google. Hi, Googlers!)
----
* Current target is databases of O(50k) records
* No reason Prophet replicas _can't_ scale.
----
* We just have a political agenda. 
* Web 2.0 is not Open Source.
* Your data should not be 'exportable' from the cloud.
* You should ALWAYS have full control.
* So we dont need to store 10 billion records in one database.
* (Or do you have 10 billion bugs/customer contacts/sales orders?)
----
(That said, we'd love to see a high-performance, scalable prophet replica store)
----
WHAT ARE YOUR PLANS?
----
(AKA: What sucks about Prophet?)
----
* Search Indexes
* Full Text Search
* Query language
* Non-subversion native replica format
* Enhanced REST Server
* Jifty, Catalyst, Rails models?
----
PROJECT STATS
----
Prophet is YOUNG
----
Many, many hours of design
----
About 10 days of two hackers hacking so far.
----
Prophet: 4837 lines of code and doc, 1455 lines of tests
sd:      1479 lines of code and doc,  446 lines of tests
----
WHERE DO I GET A COPY?
----
svn: http://code.bestpractical.com/bps-public/Prophet/
svn: http://code.bestpractical.com/bps-public/sd/
----
CAN I HELP?
----
YES!
----
HOW CAN I HELP?
----
prophet-request@lists.bestpractical.com
